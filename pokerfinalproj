
/**
 * Write a description of class Poker here.
 * Playable Poker Game with functional AI
 * @author (Rahul Khullar)
 * @version (1.0)
 */
import java.util.*;
public class Poker
{
    String[] deckr = {"2H","2C","2D","2S","3H","3C","3D","3S","4H","4C","4D","4S","5H","5C","5D","5S","6H","6C","6D","6S","7H","7C","7D","7S","8H","8C","8D","8S","9H","9C","9D","9S","TH","TC","TD","TS","JH","JC","JD","JS","QH","QC","QD","QS","KH","KC","KD","KS","AH","AC","AD","AS"};
    String[] phand;
    String[] ohand;
    String[] totp;
    String[] toto;
    int pot = 0;
    int pchip = 100;
    int ochip = 100;
    int sblind = 5;
    int bblind = 10;
    int currbet = 0;
    String dealer = "p";
    Scanner p1 = new Scanner(System.in);
    String dec;
    public Poker()
    {
        // initialise instance variables
        shuffle(deckr);
        ArrayList<String> deck = create(deckr);
        boolean win = false;
        while(win==false){
            if(checkwin(pchip,ochip)==true){
                win=true;
            }
            preflop(deck);
            flop(deck);
            turn(deck);
            river(deck);
        }
    }

    public void shuffle(String[] deck1){
        int c =0;
        while(c<5){
            for(int i=0; i < deck1.length; i++){
                int rand = random(0,deck1.length);
                while(deck1[rand].equals(deck1[i])){
                    rand = random(0,deck1.length);
                }
                String temp = deck1[i];
                deck1[i] = deck1[rand];
                deck1[rand]=temp;
            }
            c++;
        }
    }

    public boolean checkwin(int finp, int fino){
        if(finp<=0){
            System.out.println("Comp wins");
            return true;
        }
        if (fino<=0){
            System.out.println("Player wins");
            return true;
        }
        return false;
    }

    public void preflop(ArrayList<String> deck){
        pot = 0;
        currbet=0;
        tot();
        if(dealer.equals("p")){
            phand = genhand(deck);
            checky(deck);
            ohand = genhand(deck);
            System.out.println("Player pays small blind of: " + sblind);
            pchip -= sblind;
            pot += sblind;
            System.out.println("Player hand is: " + Arrays.toString(phand));
            System.out.println("Choose to check, fold, or bet");
            dec = p1.nextLine();
            if(dec.equals("check")){
                System.out.println("Player checks");
                ochip -= bblind;
                pot += bblind;
                if(pairs(ohand) > 0){
                    boolean raise = true;
                    while(raise == true){
                        int rando = random(0, 30);
                        bet("o", rando);
                        System.out.println("Player can match, raise, or fold");
                        dec = p1.nextLine();
                        if (dec.equals("fold")){
                            raise = false;
                            System.out.println("Player folds, comp wins pot of: " + pot);
                            ochip+=pot;
                        }
                        else if(dec.equals("match")){
                            raise = false;
                            bet("p", currbet);
                        }
                        else if(dec.equals("raise")){
                            System.out.println("Enter the amount of your bet, must be <= your chips");
                            int b = p1.nextInt();
                            bet("p",b);                            
                        }
                    }
                }
                else{
                    System.out.println("Comp checks");
                }
            }
            else if(dec.equals("fold")){
                System.out.println("Player folds, comp wins pot of: " + pot);
                ochip += pot;
            }
            else if(dec.equals("bet")){
                System.out.println("Enter the amount of your bet, must be <= your chips");
                int b = p1.nextInt();
                bet("p",b);
                ochip -= bblind;
                pot += bblind;
                if (b < 50 || pairs(ohand)>0){
                    boolean raise = true;
                    while(raise == true){
                        int rando = random(0, 30);
                        bet("o", rando);
                        System.out.println("Player can match, raise, or fold");
                        dec = p1.nextLine();
                        if (dec.equals("fold")){
                            raise = false;
                            System.out.println("Player folds, comp wins pot of: " + pot);
                            ochip+=pot;
                        }
                        else if(dec.equals("match")){
                            raise = false;
                            bet("p", currbet);
                        }
                        else if(dec.equals("raise")){
                            System.out.println("Enter the amount of your bet, must be <= your chips");
                            b = p1.nextInt();
                            bet("p",b);                            
                        }
                    }

                }
                else{
                    dec = "fold";
                    System.out.println("Comp folds, player wins pot of: " + pot);
                    pchip += pot;                    
                }
            }
        }
        else{
            ohand = genhand(deck);
            checky(deck);
            phand = genhand(deck);
            System.out.println("Comp pays small blind of: " + sblind);
            ochip -= sblind;
            pot += sblind;
            if (pairs(ohand) >0){
                boolean raise = true;
                pchip -= bblind;
                pot += bblind;
                while(raise == true){
                    int rando = random(0, 30);
                    bet("o", rando);
                    System.out.println("Player can match, raise, or fold");
                    dec = p1.nextLine();
                    if (dec.equals("fold")){
                        raise = false;
                        System.out.println("Player folds, comp wins pot of: " + pot);
                        ochip+=pot;
                    }
                    else if(dec.equals("match")){
                        raise = false;
                        bet("p", currbet);
                    }
                    else if(dec.equals("raise")){
                        System.out.println("Enter the amount of your bet, must be <= your chips");
                        int b = p1.nextInt();
                        bet("p",b); 
                    }
                }
            }
            else{
                System.out.println("Comp checks");
                pchip -= bblind;
                pot += bblind;
                System.out.println("Player hand is: " + Arrays.toString(phand));
                System.out.println("Choose to check, fold, or bet");
                dec = p1.nextLine();
                if(dec.equals("check")){
                    System.out.println("Player checks");
                    if(pairs(ohand) > 0){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                int b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }
                    }
                    else{
                        System.out.println("Comp checks");
                    }
                }
                else if(dec.equals("fold")){
                    System.out.println("Player folds, comp wins pot of: " + pot);
                    ochip += pot;
                }
                else if(dec.equals("bet")){
                    System.out.println("Enter the amount of your bet, must be <= your chips");
                    int b = p1.nextInt();
                    bet("p",b);
                    ochip -= bblind;
                    pot += bblind;
                    if (b < 50 || pairs(ohand)>0){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }

                    }
                    else{
                        dec = "fold";
                        System.out.println("Comp folds, player wins pot of: " + pot);
                        pchip += pot;                    
                    }
                }
            }
        }
        currbet=0;
    }

    public void flop(ArrayList<String> deck){
        if(dec.equals("fold")==false){
            tot();
            int top = deck.size() -1;
            deck.remove(top);
            top = deck.size() -1;
            String[] flop = {deck.get(top), deck.get(top-1), deck.get(top-2)};
            System.out.println("Flop: " + Arrays.toString(flop));
            checky(deck);
            deck.remove(top);
            top = deck.size() -1;
            deck.remove(top);
            top = deck.size() -1;
            checky(deck);
            deck.remove(top);
            totp = comb(phand, flop);
            toto = comb(ohand, flop);
            if(dealer.equals("p")){
                if (pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                    boolean raise = true;
                    while(raise == true){
                        int rando = random(0, 30);
                        bet("o", rando);
                        System.out.println("Player can match, raise, or fold");
                        dec = p1.nextLine();
                        if (dec.equals("fold")){
                            raise = false;
                            System.out.println("Player folds, comp wins pot of: " + pot);
                            ochip+=pot;
                        }
                        else if(dec.equals("match")){
                            raise = false;
                            bet("p", currbet);
                        }
                        else if(dec.equals("raise")){
                            System.out.println("Enter the amount of your bet, must be <= your chips");
                            int b = p1.nextInt();
                            bet("p",b); 
                        }
                    }
                }
                else{
                    System.out.println("Comp checks");
                    System.out.println("Player hand is: " + Arrays.toString(phand));
                    System.out.println("Choose to check, fold, or bet");
                    dec = p1.nextLine();
                    if(dec.equals("check")){
                        System.out.println("Player checks");
                        if(pairs(ohand) > 0){
                            boolean raise = true;
                            while(raise == true){
                                int rando = random(0, 30);
                                bet("o", rando);
                                System.out.println("Player can match, raise, or fold");
                                dec = p1.nextLine();
                                if (dec.equals("fold")){
                                    raise = false;
                                    System.out.println("Player folds, comp wins pot of: " + pot);
                                    ochip+=pot;
                                }
                                else if(dec.equals("match")){
                                    raise = false;
                                    bet("p", currbet);
                                }
                                else if(dec.equals("raise")){
                                    System.out.println("Enter the amount of your bet, must be <= your chips");
                                    int b = p1.nextInt();
                                    bet("p",b);                            
                                }
                            }
                        }
                        else{
                            System.out.println("Comp checks");
                        }
                    }
                    else if(dec.equals("fold")){
                        System.out.println("Player folds, comp wins pot of: " + pot);
                        ochip += pot;
                    }
                    else if(dec.equals("bet")){
                        System.out.println("Enter the amount of your bet, must be <= your chips");
                        int b = p1.nextInt();
                        bet("p",b);
                        if (b < 50 || pairs(ohand)>0){
                            boolean raise = true;
                            while(raise == true){
                                int rando = random(0, 30);
                                bet("o", rando);
                                System.out.println("Player can match, raise, or fold");
                                dec = p1.nextLine();
                                if (dec.equals("fold")){
                                    raise = false;
                                    System.out.println("Player folds, comp wins pot of: " + pot);
                                    ochip+=pot;
                                }
                                else if(dec.equals("match")){
                                    raise = false;
                                    bet("p", currbet);
                                }
                                else if(dec.equals("raise")){
                                    System.out.println("Enter the amount of your bet, must be <= your chips");
                                    b = p1.nextInt();
                                    bet("p",b);                            
                                }
                            }

                        }
                        else{
                            dec = "fold";
                            System.out.println("Comp folds, player wins pot of: " + pot);
                            pchip += pot;                    
                        }
                    }
                }
            }
            else{
                System.out.println("Player hand is: " + Arrays.toString(phand));
                System.out.println("Choose to check, fold, or bet");
                dec = p1.nextLine();
                if(dec.equals("check")){
                    System.out.println("Player checks");
                    if(pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                int b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }
                    }
                    else{
                        System.out.println("Comp checks");
                    }
                }
                else if(dec.equals("fold")){
                    System.out.println("Player folds, comp wins pot of: " + pot);
                    ochip += pot;
                }
                else if(dec.equals("bet")){
                    System.out.println("Enter the amount of your bet, must be <= your chips");
                    int b = p1.nextInt();
                    bet("p",b);
                    if (b < 50 || pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }

                    }
                    else{
                        dec = "fold";
                        System.out.println("Comp folds, player wins pot of: " + pot);
                        pchip += pot;                    
                    }
                }
            }
            currbet=0;
        }
    }

    public void turn(ArrayList<String> deck){
        if(dec.equals("fold")==false){
            tot();
            int top = deck.size() -1;
            deck.remove(top);
            top = deck.size() -1;
            String[] turn = {deck.get(top)};
            System.out.println("Turn is: " + Arrays.toString(turn));
            checky(deck);
            deck.remove(top);
            checky(deck);
            totp = comb(totp, turn);
            toto = comb(toto, turn);
            if(dealer.equals("p")){
                if (pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                    boolean raise = true;
                    while(raise == true){
                        int rando = random(0, 30);
                        bet("o", rando);
                        System.out.println("Player can match, raise, or fold");
                        dec = p1.nextLine();
                        if (dec.equals("fold")){
                            raise = false;
                            System.out.println("Player folds, comp wins pot of: " + pot);
                            ochip+=pot;
                        }
                        else if(dec.equals("match")){
                            raise = false;
                            bet("p", currbet);
                        }
                        else if(dec.equals("raise")){
                            System.out.println("Enter the amount of your bet, must be <= your chips");
                            int b = p1.nextInt();
                            bet("p",b); 
                        }
                    }
                }
                else{
                    System.out.println("Comp checks");
                    System.out.println("Player hand is: " + Arrays.toString(phand));
                    System.out.println("Choose to check, fold, or bet");
                    dec = p1.nextLine();
                    if(dec.equals("check")){
                        System.out.println("Player checks");
                        if(pairs(ohand) > 0){
                            boolean raise = true;
                            while(raise == true){
                                int rando = random(0, 30);
                                bet("o", rando);
                                System.out.println("Player can match, raise, or fold");
                                dec = p1.nextLine();
                                if (dec.equals("fold")){
                                    raise = false;
                                    System.out.println("Player folds, comp wins pot of: " + pot);
                                    ochip+=pot;
                                }
                                else if(dec.equals("match")){
                                    raise = false;
                                    bet("p", currbet);
                                }
                                else if(dec.equals("raise")){
                                    System.out.println("Enter the amount of your bet, must be <= your chips");
                                    int b = p1.nextInt();
                                    bet("p",b);                            
                                }
                            }
                        }
                        else{
                            System.out.println("Comp checks");
                        }
                    }
                    else if(dec.equals("fold")){
                        System.out.println("Player folds, comp wins pot of: " + pot);
                        ochip += pot;
                    }
                    else if(dec.equals("bet")){
                        System.out.println("Enter the amount of your bet, must be <= your chips");
                        int b = p1.nextInt();
                        bet("p",b);
                        if (b < 50 || pairs(ohand)>0){
                            boolean raise = true;
                            while(raise == true){
                                int rando = random(0, 30);
                                bet("o", rando);
                                System.out.println("Player can match, raise, or fold");
                                dec = p1.nextLine();
                                if (dec.equals("fold")){
                                    raise = false;
                                    System.out.println("Player folds, comp wins pot of: " + pot);
                                    ochip+=pot;
                                }
                                else if(dec.equals("match")){
                                    raise = false;
                                    bet("p", currbet);
                                }
                                else if(dec.equals("raise")){
                                    System.out.println("Enter the amount of your bet, must be <= your chips");
                                    b = p1.nextInt();
                                    bet("p",b);                            
                                }
                            }

                        }
                        else{
                            dec = "fold";
                            System.out.println("Comp folds, player wins pot of: " + pot);
                            pchip += pot;                    
                        }
                    }
                }
            }
            else{
                System.out.println("Player hand is: " + Arrays.toString(phand));
                System.out.println("Choose to check, fold, or bet");
                dec = p1.nextLine();
                if(dec.equals("check")){
                    System.out.println("Player checks");
                    if(pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                int b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }
                    }
                    else{
                        System.out.println("Comp checks");
                    }
                }
                else if(dec.equals("fold")){
                    System.out.println("Player folds, comp wins pot of: " + pot);
                    ochip += pot;
                }
                else if(dec.equals("bet")){
                    System.out.println("Enter the amount of your bet, must be <= your chips");
                    int b = p1.nextInt();
                    bet("p",b);
                    if (b < 50 || pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }

                    }
                    else{
                        dec = "fold";
                        System.out.println("Comp folds, player wins pot of: " + pot);
                        pchip += pot;                    
                    }
                }
            }
            currbet=0;
        }
    }

    public void river(ArrayList<String> deck){
        if(dec.equals("fold")==false){
            tot();
            int top = deck.size() -1;
            deck.remove(top);
            top = deck.size() -1;
            String[] river = {deck.get(top)};
            System.out.println("River is: " + Arrays.toString(river));
            checky(deck);
            deck.remove(top);
            checky(deck);
            totp = comb(totp, river);
            toto = comb(toto, river);
            if(dealer.equals("p")){
                if (pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                    boolean raise = true;
                    while(raise == true){
                        int rando = random(0, 30);
                        bet("o", rando);
                        System.out.println("Player can match, raise, or fold");
                        dec = p1.nextLine();
                        if (dec.equals("fold")){
                            raise = false;
                            System.out.println("Player folds, comp wins pot of: " + pot);
                            ochip+=pot;
                        }
                        else if(dec.equals("match")){
                            raise = false;
                            bet("p", currbet);
                        }
                        else if(dec.equals("raise")){
                            System.out.println("Enter the amount of your bet, must be <= your chips");
                            int b = p1.nextInt();
                            bet("p",b); 
                        }
                    }
                }
                else{
                    System.out.println("Comp checks");
                    System.out.println("Player hand is: " + Arrays.toString(phand));
                    System.out.println("Choose to check, fold, or bet");
                    dec = p1.nextLine();
                    if(dec.equals("check")){
                        System.out.println("Player checks");
                        if(pairs(ohand) > 0){
                            boolean raise = true;
                            while(raise == true){
                                int rando = random(0, 30);
                                bet("o", rando);
                                System.out.println("Player can match, raise, or fold");
                                dec = p1.nextLine();
                                if (dec.equals("fold")){
                                    raise = false;
                                    System.out.println("Player folds, comp wins pot of: " + pot);
                                    ochip+=pot;
                                }
                                else if(dec.equals("match")){
                                    raise = false;
                                    bet("p", currbet);
                                }
                                else if(dec.equals("raise")){
                                    System.out.println("Enter the amount of your bet, must be <= your chips");
                                    int b = p1.nextInt();
                                    bet("p",b);                            
                                }
                            }
                        }
                        else{
                            System.out.println("Comp checks");
                        }
                    }
                    else if(dec.equals("fold")){
                        System.out.println("Player folds, comp wins pot of: " + pot);
                        ochip += pot;
                    }
                    else if(dec.equals("bet")){
                        System.out.println("Enter the amount of your bet, must be <= your chips");
                        int b = p1.nextInt();
                        bet("p",b);
                        if (b < 50 || pairs(ohand)>0){
                            boolean raise = true;
                            while(raise == true){
                                int rando = random(0, 30);
                                bet("o", rando);
                                System.out.println("Player can match, raise, or fold");
                                dec = p1.nextLine();
                                if (dec.equals("fold")){
                                    raise = false;
                                    System.out.println("Player folds, comp wins pot of: " + pot);
                                    ochip+=pot;
                                }
                                else if(dec.equals("match")){
                                    raise = false;
                                    bet("p", currbet);
                                }
                                else if(dec.equals("raise")){
                                    System.out.println("Enter the amount of your bet, must be <= your chips");
                                    b = p1.nextInt();
                                    bet("p",b);                            
                                }
                            }

                        }
                        else{
                            dec = "fold";
                            System.out.println("Comp folds, player wins pot of: " + pot);
                            pchip += pot;                    
                        }
                    }
                }
            }
            else{
                System.out.println("Player hand is: " + Arrays.toString(phand));
                System.out.println("Choose to check, fold, or bet");
                dec = p1.nextLine();
                if(dec.equals("check")){
                    System.out.println("Player checks");
                    if(pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                int b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }
                    }
                    else{
                        System.out.println("Comp checks");
                    }
                }
                else if(dec.equals("fold")){
                    System.out.println("Player folds, comp wins pot of: " + pot);
                    ochip += pot;
                }
                else if(dec.equals("bet")){
                    System.out.println("Enter the amount of your bet, must be <= your chips");
                    int b = p1.nextInt();
                    bet("p",b);
                    if (b < 50 || pairs(ohand) >0 || threekind(toto) >0 || Flush(toto)==true){
                        boolean raise = true;
                        while(raise == true){
                            int rando = random(0, 30);
                            bet("o", rando);
                            System.out.println("Player can match, raise, or fold");
                            dec = p1.nextLine();
                            if (dec.equals("fold")){
                                raise = false;
                                System.out.println("Player folds, comp wins pot of: " + pot);
                                ochip+=pot;
                            }
                            else if(dec.equals("match")){
                                raise = false;
                                bet("p", currbet);
                            }
                            else if(dec.equals("raise")){
                                System.out.println("Enter the amount of your bet, must be <= your chips");
                                b = p1.nextInt();
                                bet("p",b);                            
                            }
                        }

                    }
                    else{
                        dec = "fold";
                        System.out.println("Comp folds, player wins pot of: " + pot);
                        pchip += pot;                    
                    }
                }
            }
            currbet=0;
        }
        if (dec.equals("fold")==false){
            finish(totp,toto);
        }
    }

    public void finish(String[] ptot, String[] otot){
        int pscore =0;
        int oscore =0;
        if (pairs(ptot) >0){
            pscore=1;
            if(pairs(ptot)>1){
                pscore = 2;
            }
        }
        if (pairs(otot) >0){
            oscore=1;
            if(pairs(otot)>1){
                oscore = 2;
            }
        }
        /*
        if (threekind(ptot)>0){
            pscore=3;
        }
        if (threekind(otot)>0){
            oscore=3;
        }
        */
        if(straight(ptot)){
            pscore=4;
        }
        if(straight(otot)){
            oscore=4;
        }
        if(Flush(ptot)){
            pscore=5;
        }
        if(Flush(otot)){
            oscore=5;
        }
        /*
        if(FullHouse(ptot)){
            pscore=6;
        }
        if(FullHouse(otot)){
            oscore=6;
        }
        if(fourkind(ptot)){
            pscore=7;
        }
        if(fourkind(otot)){
            oscore=7;
        }
        */
        if(straightf(ptot)){
            pscore=8;
        }
        if(straightf(otot)){
            oscore=8;
        }
        if(royalflush(ptot)){
            pscore=9;
        }
        if(royalflush(otot)){
            oscore=9;
        }
        if(pscore==0 && oscore==0){
            if(highcard(phand)>highcard(ohand)){
                pscore=1;
            }
            else if (highcard(ohand)> highcard(phand)){
                oscore =1;
            }
        }
        if(pscore>oscore){
            System.out.println("Player wins pot of: " + pot);
            pchip += pot;
            pot=0;
        }
        else if(oscore>pscore){
            System.out.println("Comp wins pot of: " + pot);
            ochip += pot;
            pot=0;
        }
        else if(oscore==pscore){
            int half = pot/2;
            System.out.println("Player and Comp split pot and each get: " + half);
            pchip+=half;
            ochip+=half;
            pot=0;
        }
    }

    public void tot(){
        System.out.println("Player chips: " + pchip);
        System.out.println("Comp chips: " + ochip);
    }

    public int pairs(String[] c){
        int a = 0;
        for(int i = 1; i < c.length; i++){
            if (first(c[i]).equals(first(c[i - 1]))){
                a += 1;
                i++;
            }
        }
        return a;
    }

    public String sec(String b){
        b = b.substring(1, b.length());
        return b;
    }

    public String first(String a){
        a = a.substring(0, 1);
        return a;
    }

    public void bet(String per, int amt){
        if(per.equals("p") && amt > pchip){
            amt = pchip;
        }
        if(per.equals("o") && amt > ochip){
            amt = ochip;
        }
        currbet += amt;
        if(per.equals("p")){
            System.out.println("Player bets: " + amt);
            pchip -= amt;
        }
        else{
            System.out.println("Comp bets: " + amt);
            ochip -= amt;
        }
        pot +=amt;
    }

    public String[] genhand(ArrayList<String> deck){
        checky(deck);
        int rand = random(0, deck.size());
        int rand2 = random(0, deck.size());
        while(deck.get(rand).equals(deck.get(rand2))){
            rand = random(0,deck.size());
        }
        String[] hand = {deck.get(rand),deck.get(rand2)};
        String val = deck.get(rand2);
        deck.remove(rand);
        int ind = deck.indexOf(val);
        deck.remove(ind);
        checky(deck);
        return hand;
    }

    public String[] comb(String[] a, String[] b){
        String[] c = new String[a.length+b.length];
        int i=0;
        while(i<a.length){
            c[i] = a[i];
            i++;
        }
        int t =0;
        while(i<c.length){
            c[i] = b[t];
            i++;
            t++;
        }
        return c;
    }

    public void checky(ArrayList<String> deck){
        if(deck.size()<2){
            shuffle(deckr);
            deck = create(deckr);
        }
    }

    public ArrayList<String> create(String[] deck1){
        ArrayList<String> deck = new ArrayList();
        for(int i=0; i<deck1.length;i++){
            deck.add(deck1[i]);
        }
        return deck;
    }

    public boolean Flush(String[] c){
        int countc = 0;
        int counts = 0;
        int countd = 0;
        int counth = 0;
        for (int i = 0; i < c.length; i++){
            String let = sec(c[i]);
            if (let.equals("C")){
                countc++;
            }
            else if (let.equals("S")){
                counts++;
            }
            else if (let.equals("D")){
                countd++;
            }
            else if (let.equals("H")){
                counth++;
            }
        }
        if (countc == 5 || countd == 5 || counth == 5 || counts == 5){
            return true;
        }
        else{
            return false;
        }
    }

    public int threekind(String[] c){
        int red = 0;
        for(int i = 2; i < c.length; i++){
            String b = first(c[i]);
            String t = first(c[i - 1]);
            String j = first(c[i - 2]);
            if (first(c[i]).equals("T")){
                b = "10";
            }
            else if (first(c[i]).equals("J")){
                b = "11";
            }
            else if (first(c[i]).equals("Q")){
                b = "12";
            }
            else if (first(c[i]).equals("K")){
                b = "13";
            }
            else if (first(c[i]).equals("A")){
                b = "14";
            }
            if (first(c[i - 1]).equals("T")){
                t = "10";
            }
            else if (first(c[i - 1]).equals("J")){
                t = "11";
            }
            else if (first(c[i - 1]).equals("Q")){
                t = "12";
            }
            else if (first(c[i - 1]).equals("K")){
                t = "13";
            }
            else if (first(c[i - 1]).equals("A")){
                t = "14";
            }
            if (first(c[i - 2]).equals("T")){
                j = "10";
            }
            else if (first(c[i - 2]).equals("J")){
                j = "11";
            }
            else if (first(c[i - 2]).equals("Q")){
                j = "12";
            }
            else if (first(c[i - 2]).equals("K")){
                j = "13";
            }
            else if (first(c[i - 2]).equals("A")){
                j = "14";
            }
            int f = Integer.parseInt(b);
            int l = Integer.parseInt(t);
            int y = Integer.parseInt(j);
            if (f == l && f == y);{
                red += 1;
            }
        }
        return red;
    }

    public boolean fourkind(String[] c){
        int a = 0;
        for(int i = 3; i < c.length; i++){
            String b = first(c[i]);
            String t = first(c[i - 1]);
            String j = first(c[i - 2]);
            String h = first(c[i - 3]);
            if (first(c[i]).equals("T")){
                b = "10";
            }
            else if (first(c[i]).equals("J")){
                b = "11";
            }
            else if (first(c[i]).equals("Q")){
                b = "12";
            }
            else if (first(c[i]).equals("K")){
                b = "13";
            }
            else if (first(c[i]).equals("A")){
                b = "14";
            }
            if (first(c[i - 1]).equals("T")){
                t = "10";
            }
            else if (first(c[i - 1]).equals("J")){
                t = "11";
            }
            else if (first(c[i - 1]).equals("Q")){
                t = "12";
            }
            else if (first(c[i - 1]).equals("K")){
                t = "13";
            }
            else if (first(c[i - 1]).equals("A")){
                t = "14";
            }
            if (first(c[i - 2]).equals("T")){
                j = "10";
            }
            else if (first(c[i - 2]).equals("J")){
                j = "11";
            }
            else if (first(c[i - 2]).equals("Q")){
                j = "12";
            }
            else if (first(c[i - 2]).equals("K")){
                j = "13";
            }
            else if (first(c[i - 2]).equals("A")){
                j = "14";
            }
            if (first(c[i - 3]).equals("T")){
                h = "10";
            }
            else if (first(c[i - 3]).equals("J")){
                h = "11";
            }
            else if (first(c[i - 3]).equals("Q")){
                h = "12";
            }
            else if (first(c[i - 3]).equals("K")){
                h = "13";
            }
            else if (first(c[i - 3]).equals("A")){
                h = "14";
            }
            int f = Integer.parseInt(b);
            int l = Integer.parseInt(t);
            int y = Integer.parseInt(j);
            int r = Integer.parseInt(h);
            if (f == l && f == y && f == r);{
                a += 1;
            }

        }
        if(a>0){
            return true;
        }
        return false;
    }

    public boolean FullHouse(String[] c){
        if (threekind(c) > 0 && pairs(c) > 0){
            return true;
        }
        else {
            return false;
        }
    }

    public boolean straight(String[] c){
        int z = 0;
        for(int i = 1; i < c.length; i++){
            String b = first(c[i]);
            String l = first(c[i - 1]);
            if (first(c[i]).equals("T")){
                b = "10";
            }
            else if (first(c[i]).equals("J")){
                b = "11";
            }
            else if (first(c[i]).equals("Q")){
                b = "12";
            }
            else if (first(c[i]).equals("K")){
                b = "13";
            }
            else if (first(c[i]).equals("A")){
                b = "14";
            }
            if (first(c[i - 1]).equals("T")){
                l = "10";
            }
            else if (first(c[i - 1]).equals("J")){
                l = "11";
            }
            else if (first(c[i - 1]).equals("Q")){
                l = "12";
            }
            else if (first(c[i - 1]).equals("K")){
                l = "13";
            }
            else if (first(c[i - 1]).equals("A")){
                l = "14";
            }
            //System.out.println(b);
            try {
                int f = Integer.parseInt(b);
                int p = Integer.parseInt(l);
                if (f == p + 1){
                    z += 1;
                }
            }catch (NumberFormatException e){
                System.out.println("not a number"); 
            } 
            b = "";
            l = "";
        }
        if (z > 3){
            return true;
        }
        else{
            return false;
        }
    }

    public boolean straightf(String[] c){
        if (straight(c) == true && Flush(c) == true){
            return true;
        }
        else{
            return false;
        }
    }

    public int highcard(String[] c){
        int high = 0;
        for(int i = 0; i < c.length; i++){
            String b = first(c[i]);
            if (first(c[i]).equals("T")){
                b = "10";
            }
            else if (first(c[i]).equals("J")){
                b = "11";
            }
            else if (first(c[i]).equals("Q")){
                b = "12";
            }
            else if (first(c[i]).equals("K")){
                b = "13";
            }
            else if (first(c[i]).equals("A")){
                b = "14";
            }
            //System.out.println(b);
            try {
                int f = Integer.parseInt(b);
                if (f > high){
                    high = f;
                }
            }catch (NumberFormatException e){
                System.out.println("not a number"); 
            } 
            b = "";
        }
        return high;
    }

    public boolean Royal(String[] c){
        int t = 0;
        int j = 0;
        int k = 0;
        int q = 0;
        int a = 0;
        for (int i = 0; i < c.length; i++){
            if (first(c[i]).equals("T")){
                t += 1;
            }
            if (first(c[i]).equals("J")){
                j += 1;
            }
            if (first(c[i]).equals("K")){
                k += 1;
            }
            if (first(c[i]).equals("Q")){
                q += 1;
            }
            if (first(c[i]).equals("A")){
                a += 1;
            }
        }
        if (t == 1 && j == 1 && k == 1 && q == 1 && a == 1){
            return true;
        }
        else{
            return false;
        }
    }

    public boolean royalflush(String[] c){
        if (Royal(c) == true && Flush(c) == true){
            return true;
        }
        else{
            return false;
        }
    }

    public int random (int a, int b){    
        int max=a;
        int min=b;
        int random=(int)(Math.random() * (max - min) + min);
        return random;
    }
}
